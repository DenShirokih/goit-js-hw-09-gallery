{"version":3,"file":"static/js/945.5281f3c2.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/core/base.js","js/opener.js","js/slide/loader.js","js/photoswipe.js","js/slide/get-thumb-bounds.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","/** @typedef {import(\"../photoswipe\").Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import(\"./slide\").default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n/** @typedef {import(\"./gestures\").default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n/** @typedef {import(\"./gestures\").default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import(\"../types\").AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import(\"./gestures\").default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"./slide/slide\").default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import(\"./types\").Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import(\"./animations\").AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import(\"./animations\").AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import(\"../types\").Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import(\"./ui-element\").UIElementData} UIElementData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import(\"./ui-element\").UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"./ui-element\").UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import(\"../lightbox/lightbox\").default} PhotoSwipeLightbox */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../photoswipe\").DataSource} DataSource */\r\n/** @typedef {import(\"../ui/ui-element\").UIElementData} UIElementData */\r\n/** @typedef {import(\"../slide/content\").default} ContentDefault */\r\n/** @typedef {import(\"../slide/slide\").default} Slide */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../slide/zoom-level\").default} ZoomLevel */\r\n/** @typedef {import(\"../slide/get-thumb-bounds\").Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import(\"./slide\").default} Slide */\r\n/** @typedef {import(\"./slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../util/util\").LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import Eventable from './eventable';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content';\r\n\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import(\"./photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"./slide/get-thumb-bounds\").Bounds} Bounds */\r\n/** @typedef {import(\"./util/animations\").AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import(\"./content\").default} Content */\r\n/** @typedef {import(\"./slide\").default} Slide */\r\n/** @typedef {import(\"./slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n/** @typedef {import(\"../lightbox/lightbox\").default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import(\"./types\").Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import(\"./slide/slide\").SlideData} SlideData */\r\n/** @typedef {import(\"./slide/zoom-level\").ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import(\"./ui/ui-element\").UIElementData} UIElementData */\r\n/** @typedef {import(\"./main-scroll\").ItemHolder} ItemHolder */\r\n/** @typedef {import(\"./core/eventable\").PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import(\"./core/eventable\").PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import(\"./core/eventable\").EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import(\"./core/eventable\").AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","/** @typedef {import(\"./slide\").SlideData} SlideData */\r\n/** @typedef {import(\"../photoswipe\").default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","supportsPassive","window","addEventListener","get","e","DOMEvents","this","_pool","type","listener","passive","_toggleListener","poolItem","unbind","skipPool","methodName","split","eType","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","_updateAxis","dispatch","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","Number","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","holderElement","calculateSize","transformOrigin","load","appendHeavy","updateContentSize","innerHTML","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","navigator","maxTouchPoints","drag","tapHandler","on","events","add","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","change","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","doubleTap","setTimeout","tap","click","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","resize","_currPositionIndex","_prevPositionIndex","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","setIsActive","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_firstFrameTimeout","_finalizeAnimation","_finished","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","_raf","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","secondaryIsHigher","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","priority","f1","f2","addFilter","removeFilter","args","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","instance","isAttached","state","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","imageElement","srcset","complete","onLoaded","onload","onerror","onError","displayError","isError","image","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","errorMsg","removePlaceholder","isDecoding","decode","then","appendImage","catch","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","getPlaceholderElement","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","img","decoded","isDelaying","reject","finally","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","lazyLoadSlide","getItemData","createContentFromData","lazyLoad","zoomLevel","ceil","lazyLoadData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","addToCache","setSlide","removeByIndex","indexToRemove","item","find","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","open","goTo","removeAll","listeners","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}